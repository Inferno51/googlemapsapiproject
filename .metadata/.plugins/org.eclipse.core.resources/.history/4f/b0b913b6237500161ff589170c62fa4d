package localhost.googlemaps.directions;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLEncoder;

/**
 * 
 * Simple Google Directions API class
 * 
 * @author Jonathan Pack
 * @since 2016-09-06
 *
 */
public class EmployeeAPIRestPost {
	
	// The URL of the API
	protected static String endpoint = "http://localhost:1337/employee";
	
	// The charset
	protected static String charset = "UTF-8";

	// Main method for running this program
	public static void main(String[] args) {

		try {
			String firstName = "Keither";
			String lastName = "Gibsonite";
			String email = "keither.gibsonite@dumpster_diving.net";
			String homePhone = "443";
			String cellPhone = "json";
			String password = "P4ssw0rd";
			String returnType = "json";

			//creates the URL parameters as a string, and encode them with the defined charset
			String queryString = String.format("employee?firstName=%s&lastName=%s&email=%s&homePhone=%s&cellPhone=%s&password=%s&active=1",
					URLEncoder.encode(firstName, charset),
					URLEncoder.encode(lastName, charset),
					URLEncoder.encode(email, charset),
					URLEncoder.encode(homePhone, charset),
					URLEncoder.encode(cellPhone, charset),
					URLEncoder.encode(password, charset)
			);

			//creates a new URL out of the endpoint, returnType and  queryString
			URL googleDirections = new URL(endpoint + returnType + "?" + queryString);
			HttpURLConnection connection = (HttpURLConnection) googleDirections.openConnection();
			connection.setRequestMethod("POST");

			//if we did not get a 200 (success) throw an exception, and print the exception
			if (connection.getResponseCode() != 201) {
				throw new RuntimeException("Failed : HTTP error code : " + connection.getResponseCode());
			}

			//read response into buffer
			BufferedReader br = new BufferedReader(new InputStreamReader((connection.getInputStream())));

			//loop of buffer line by line until it return null meaning there are no more lines
			while (br.readLine() != null) {
				//print out each line to the screen
				System.out.println(br.readLine());
			}

			//close connection to API
			connection.disconnect();

		} catch (MalformedURLException e) {

			e.printStackTrace();

		} catch (IOException e) {

			e.printStackTrace();

		}
		
	}

}